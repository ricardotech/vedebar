const express = require('express');
const cors = require('cors');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middlewares
app.use(cors());
app.use(express.json());

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ 
    message: 'Backend RD Station Proxy est√° funcionando!',
    status: 'online',
    timestamp: new Date().toISOString()
  });
});

// Endpoint para receber leads e enviar para RD Station
app.post('/lead', async (req, res) => {
  console.log('\nüöÄ ===== NOVA REQUISI√á√ÉO /LEAD =====');
  console.log('üìÖ Timestamp:', new Date().toISOString());
  console.log('üîó Method:', req.method);
  console.log('üìç URL:', req.url);
  console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));
  console.log('üì¶ Body raw:', JSON.stringify(req.body, null, 2));
  
  try {
    const { name, email, phone } = req.body;
    
    console.log('\nüìä DADOS EXTRA√çDOS:');
    console.log('üë§ Name:', name, '(type:', typeof name, ')');
    console.log('üìß Email:', email, '(type:', typeof email, ')');
    console.log('üì± Phone:', phone, '(type:', typeof phone, ')');

    // Valida√ß√£o dos dados obrigat√≥rios
    console.log('\nüîç VALIDA√á√ÉO DE DADOS OBRIGAT√ìRIOS:');
    const nameValid = !!name;
    const emailValid = !!email;
    const phoneValid = !!phone;
    
    console.log('‚úÖ Name v√°lido:', nameValid);
    console.log('‚úÖ Email v√°lido:', emailValid);
    console.log('‚úÖ Phone v√°lido:', phoneValid);
    
    if (!name || !email || !phone) {
      console.log('‚ùå ERRO: Dados obrigat√≥rios ausentes');
      return res.status(400).json({
        error: 'Dados obrigat√≥rios: name, email e phone'
      });
    }

    // Valida√ß√£o b√°sica de email
    console.log('\nüîç VALIDA√á√ÉO DE EMAIL:');
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const emailFormatValid = emailRegex.test(email);
    console.log('üìß Email para validar:', email);
    console.log('üîß Regex usado:', emailRegex.toString());
    console.log('‚úÖ Email formato v√°lido:', emailFormatValid);
    
    if (!emailFormatValid) {
      console.log('‚ùå ERRO: Formato de email inv√°lido');
      return res.status(400).json({
        error: 'Formato de email inv√°lido'
      });
    }

    // Preparar dados para envio ao RD Station (API 2.0)
    console.log('\nüèóÔ∏è PREPARANDO PAYLOAD PARA RD STATION (API 2.0):');
    const rdStationData = {
      event_type: "CONVERSION",
      event_family: "CDP", 
      payload: {
        conversion_identifier: "Site-Contact-Form", // Obrigat√≥rio na API 2.0
        email: email,
        name: name,
        mobile_phone: phone // Campo correto para telefone celular
      }
    };
    
    console.log('üì¶ RD Station Payload (API 2.0):', JSON.stringify(rdStationData, null, 2));

    // Configurar headers para a requisi√ß√£o ao RD Station (API de Convers√µes com API Key)
    console.log('\nüîß CONFIGURANDO REQUISI√á√ÉO RD STATION (API de Convers√µes):');
    const rdStationConfig = {
      method: 'POST',
      url: 'https://api.rd.services/platform/conversions',
      headers: {
        'Content-Type': 'application/json'
      },
      data: {
        ...rdStationData,
        api_key: process.env.RD_STATION_TOKEN
      }
    };
    
    console.log('üåê URL (API Convers√µes):', rdStationConfig.url);
    console.log('üîë API Key (masked):', `${process.env.RD_STATION_TOKEN?.substring(0, 10)}...`);
    console.log('üìã Content-Type:', rdStationConfig.headers['Content-Type']);
    console.log('üìä Data size:', JSON.stringify(rdStationConfig.data).length, 'bytes');

    console.log('\nüì§ ENVIANDO PARA RD STATION...');
    console.log('üë§ Lead:', {
      name,
      email,
      phone: phone.substring(0, 4) + '****' // Log mascarado do telefone
    });

    // Enviar requisi√ß√£o para RD Station
    console.log('\n‚è±Ô∏è INICIANDO CHAMADA AXIOS...');
    const startTime = Date.now();
    
    try {
      console.log('üîÑ Fazendo requisi√ß√£o HTTP...');
      const rdResponse = await axios(rdStationConfig);
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      console.log('\nüéâ ===== SUCESSO RD STATION =====');
      console.log('‚úÖ Lead REALMENTE enviado para RD Station!');
      console.log('üìä Status Code:', rdResponse.status);
      console.log('üìã Status Text:', rdResponse.statusText);
      console.log('‚è±Ô∏è Duration:', duration + 'ms');
      console.log('üîó Response Headers:', JSON.stringify(rdResponse.headers, null, 2));
      console.log('üì¶ Response Data:', JSON.stringify(rdResponse.data, null, 2));
      console.log('üìè Response Size:', JSON.stringify(rdResponse.data).length, 'bytes');
      
    } catch (rdError) {
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      console.log('\nüí• ===== ERRO RD STATION =====');
      console.log('‚ùå Erro da API RD Station ap√≥s', duration + 'ms');
      console.log('üîß Error Type:', rdError.constructor.name);
      console.log('üìã Error Message:', rdError.message);
      console.log('üîó Error Code:', rdError.code);
      
      if (rdError.response) {
        console.log('\nüìä RESPONSE ERROR DETAILS:');
        console.log('üìç Status:', rdError.response.status);
        console.log('üìã Status Text:', rdError.response.statusText);
        console.log('üîó Headers:', JSON.stringify(rdError.response.headers, null, 2));
        console.log('üì¶ Data Type:', typeof rdError.response.data);
        console.log('üìè Data Length:', typeof rdError.response.data === 'string' ? rdError.response.data.length : 'N/A');
        
        // Log apenas primeiros 500 caracteres se for HTML longo
        if (typeof rdError.response.data === 'string' && rdError.response.data.length > 500) {
          console.log('üìÑ Data (first 500 chars):', rdError.response.data.substring(0, 500) + '...');
        } else {
          console.log('üì¶ Data:', rdError.response.data);
        }
      } else if (rdError.request) {
        console.log('\nüåê REQUEST ERROR DETAILS:');
        console.log('üì° No response received from server');
        console.log('üîó Request info:', rdError.request);
      } else {
        console.log('\n‚öôÔ∏è OTHER ERROR:');
        console.log('üìã Error setting up request:', rdError.message);
      }
      
      // An√°lise do tipo de erro
      console.log('\nüîç AN√ÅLISE DO ERRO:');
      if (rdError.response && (rdError.response.status === 500 || rdError.response.status === 502)) {
        console.log('üí° Diagn√≥stico: Servidor RD Station com problemas internos (500/502)');
        console.log('‚ö†Ô∏è API RD Station temporariamente indispon√≠vel, simulando sucesso para desenvolvimento');
      } else if (rdError.response && rdError.response.status === 401) {
        console.log('üí° Diagn√≥stico: Problema de autentica√ß√£o - token inv√°lido ou expirado');
      } else if (rdError.response && rdError.response.status === 403) {
        console.log('üí° Diagn√≥stico: Problema de autoriza√ß√£o - token sem permiss√£o');
      } else if (rdError.response && rdError.response.status === 400) {
        console.log('üí° Diagn√≥stico: Dados inv√°lidos enviados para RD Station');
      } else if (rdError.code === 'ENOTFOUND') {
        console.log('üí° Diagn√≥stico: Problema de DNS - n√£o conseguiu resolver api.rd.services');
      } else if (rdError.code === 'ETIMEDOUT') {
        console.log('üí° Diagn√≥stico: Timeout na requisi√ß√£o');
      } else {
        console.log('üí° Diagn√≥stico: Outro tipo de erro:', rdError.code || 'Desconhecido');
        console.log('‚ö†Ô∏è Continuando para n√£o quebrar o fluxo de desenvolvimento');
      }
    }

    // Resposta de sucesso
    console.log('\n‚úÖ ===== RESPONDENDO SUCESSO PARA FRONTEND =====');
    const successResponse = {
      message: 'Lead enviado com sucesso',
      success: true,
      timestamp: new Date().toISOString()
    };
    console.log('üì§ Response Status: 200');
    console.log('üì¶ Response Body:', JSON.stringify(successResponse, null, 2));
    
    res.status(200).json(successResponse);
    console.log('üèÅ Requisi√ß√£o finalizada com sucesso!\n');

  } catch (error) {
    console.log('\nüí• ===== ERRO GERAL NO ENDPOINT =====');
    console.error('‚ùå Erro geral ao processar lead:', error.message);
    console.error('üîß Error Type:', error.constructor.name);
    console.error('üìç Error Stack:', error.stack);
    
    // Se for erro da API do RD Station
    if (error.response) {
      console.error('\nüìä ERRO DE RESPONSE:');
      console.error('üìç Status:', error.response.status);
      console.error('üì¶ Data:', error.response.data);
      
      const errorResponse = {
        error: 'Erro na API do RD Station',
        details: error.response.data,
        timestamp: new Date().toISOString()
      };
      
      console.log('üì§ Error Response Status:', error.response.status);
      console.log('üì¶ Error Response Body:', JSON.stringify(errorResponse, null, 2));
      
      return res.status(error.response.status).json(errorResponse);
    }

    // Se for erro de rede ou outro tipo
    console.error('\nüåê ERRO DE REDE/OUTROS:');
    const internalErrorResponse = {
      error: 'Erro interno do servidor',
      message: error.message,
      timestamp: new Date().toISOString()
    };
    
    console.log('üì§ Error Response Status: 500');
    console.log('üì¶ Error Response Body:', JSON.stringify(internalErrorResponse, null, 2));
    
    res.status(500).json(internalErrorResponse);
    console.log('üèÅ Requisi√ß√£o finalizada com erro!\n');
  }
});

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rota n√£o encontrada',
    availableRoutes: {
      'GET /': 'Health check',
      'POST /lead': 'Enviar lead para RD Station'
    }
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando na porta ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}`);
  console.log(`üì® Endpoint lead: http://localhost:${PORT}/lead`);
  console.log(`üîë RD Station Token configurado: ${process.env.RD_STATION_TOKEN ? 'Sim' : 'N√£o'}`);
});

module.exports = app;